Description: >
    Deploy a high-availability web app using CloudFormation

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    AMItoUse:
        Description: AMI to use for our base image
        Type: String
    InsType:
        Description: Instance Type to deploy
        Type: String
    AutoScaleMin:
        Description: Min Number of Instance in autoscaling group
        Type: String
    AutoScaleMax:
        Description: Max Number of Instance in autoscaling group
        Type: String
    KeyPair:
        Description: LaunchConfiguration Key Pair
        Type: String
    EBS:
        Description: Define EBS Volume Size
        Type: Number


Resources:
    LBSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

    ProfileWithRolesForOurApp:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Path: /
        Roles:
          - Fn::ImportValue:
              !Sub ${EnvironmentName}-S3ReadOnlyRole

    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install apache2 -y
            sudo systemctl start apache2.service
            sudo systemctl enable apache2.service
            sudo apt-get install awscli -y
            sudo aws s3 cp  s3://${S3Name} /var/www/html  --recursive
            sudo systemctl reload apache2.service
          -  S3Name: 
              Fn::ImportValue:
                !Sub ${EnvironmentName}-BucketName
        ImageId: !Ref AMItoUse
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        KeyName: !Ref KeyPair
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: !Ref InsType
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: !Ref EBS 

    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: !Ref AutoScaleMin
        MaxSize: !Ref AutoScaleMax
        TargetGroupARNs:
        - Ref: WebAppTargetGroup

    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        SecurityGroups:
        - Ref: LBSecGroup

    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: '80'
        Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1

    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID"

Outputs: 
    AppLB: 
        Description: A reference to Load Balancer URL
        Value: !Sub "http://${WebAppLB.DNSName}"
        Export:
          Name: !Sub ${EnvironmentName}-Load-Balancer-URL

